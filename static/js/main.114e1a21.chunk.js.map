{"version":3,"sources":["logo.svg","components/react_adal/react-adal-google.js","adalConfig.js","actions/index.js","reducers/Sec.js","services/api.js","components/Header.js","components/App.js","components/Pricing.js","components/About.js","components/Layout.js","Routes.js","serviceWorker.js","reducers/App.js","sagas/index.js","index.js","store/configureStore.js"],"names":["module","exports","__webpack_require__","p","googleSecureCall","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","f","auth","signedIn","r","wrap","_context","prev","next","window","gapi","auth2","getAuthInstance","currentUser","get","console","log","getBasicProfile","signIn","sent","abrupt","stop","this","_x","apply","arguments","adalConfig","tenant","clientId","endpoints","api","cacheLocation","popUp","authContext","AuthenticationContext","withGoogleLoginApi","WrappedComponent","renderLoading","renderError","_React$Component","_class2","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","checkGapi","googleReady","load","init","ux_mode","client_id","scope","setState","bind","assertThisInitialized","setTimeout","ready","logged","componentWillMount","state","error","inherits","createClass","key","value","react_default","createElement","React","Component","getGoogleToken","Promise","resolve","reject","getAuthResponse","id_token","e","getAdalToken","adalGetToken","setSecAzure","createAction","setSecGoogle","setSecReset","setSecUser","setSecGoogleFailure","requestTest","testRequested","testRecieved","testFailed","reducer","handleActions","_handleActions","defineProperty","actions","action","objectSpread","loginType","loggedIn","user","payload","secError","token","getSec","sec","config","getToken","apiBase","scheme","apiRequest","url","params","noAuth","query","firstSet","i","push","length","encodeURIComponent","fetch","concat","method","headers","Authorization","Content-Type","then","response","json","data","catch","_x2","_x3","getTest","getUserInfo","setGetToken","logOut","Header","Navbar","fixedTop","fluid","collapseOnSelect","Brand","Row","Col","xs","react_router_dom_es","className","to","Toggle","Collapse","Nav","lib","exact","NavItem","pullRight","NavDropdown","id","noCaret","title","thumb","style","height","paddingRight","srcSet","name","Glyphicon","pullright","glyph","MenuItem","onClick","withRouter","connect","dispatch","App","callApi","test","credentials","responseGoogle","code","nextProps","res","setSecGoogleSuccess","_this2","data-onsuccess","href","target","rel","Pricing","About","Layout","Grid","sm","components_Header","path","component","AzureApp","handleWindowCallback","withAdalLogin","GoogleApp","Routes","setGoogle","signOut","profile","setUser","email","userName","picture","getCachedUser","setSec","components_Layout","routes","Boolean","location","hostname","match","put","t0","_marked","root","rootSaga","_context2","all","takeLatest","baseUrl","document","getElementsByTagName","getAttribute","history","createBrowserHistory","basename","rootElement","getElementById","store","reducers","app","Sec","sageMiddleware","createSagaMiddleware","middleware","thunk","routerMiddleware","enhancers","rootReducer","combineReducers","routing","routerReducer","applyMiddleware","save","states","namespace","createStore","createStoreWithMiddleware","compose","run","sagas","configureStore","ReactDOM","render","es","react_router_redux_es","src_Routes","script","onload","loadClientWhenGapiReady","src","body","appendChild","initGapi","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.114e1a21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// eslint-disable-next-line\r\nimport React from 'react';\r\n\r\n\r\n\r\nexport function googleGetToken() {\r\n  return new Promise((resolve, reject) => {\r\n    \r\n    googleSecureCall(()=>{resolve(window.gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().id_token)},\r\n     (e)=>reject(e)\r\n    );\r\n    \r\n    /*authContext.acquireToken(resourceGuiId, (message, token, msg) => {\r\n      if (!msg) resolve(token);\r\n      // eslint-disable-next-line\r\n      else reject({ message, msg });\r\n    });*/\r\n  });\r\n}\r\n\r\n/*export function runWithAdal(authContext, app, doNotLogin) {\r\n  //it must run in iframe to for refreshToken (parsing hash and get token)\r\n  authContext.handleWindowCallback();\r\n\r\n  //prevent iframe double app !!!\r\n  if (window === window.parent) {\r\n    if (!authContext.isCallback(window.location.hash)) {\r\n      if (!authContext.getCachedToken(authContext.config.clientId) ||\r\n          !authContext.getCachedUser()) {\r\n        if (doNotLogin) {\r\n          app();\r\n        } else {\r\n          authContext.login();\r\n        }\r\n      } else {\r\n        app();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function googleFetch(authContext, resourceGuiId, fetch, url, options) {\r\n  return googleGetToken(authContext, resourceGuiId).then((token) => {\r\n    const o = options || {};\r\n    if (!o.headers) o.headers = {};\r\n    o.headers.Authorization = `Bearer ${token}`;\r\n    return fetch(url, o);\r\n  });\r\n}\r\n*/\r\n// eslint-disable-next-line\r\n/*export const withGoogleLogin = (authContext, resourceId) => {\r\n  // eslint-disable-next-line\r\n  return function(WrappedComponent, renderLoading, renderError) {\r\n    return class extends React.Component {\r\n      constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          logged: false,\r\n          error: null,\r\n        };\r\n      }\r\n\r\n      componentWillMount = () => {\r\n        googleGetToken(authContext, resourceId)\r\n          .then(() => this.setState({ logged: true }))\r\n          .catch((error) => {\r\n            const { msg } = error;\r\n            console.log(error);\r\n            \r\n            if (msg === 'login required') {\r\n              authContext.login();\r\n            } else {\r\n              authContext.login();\r\n            }\r\n          });\r\n      };\r\n\r\n      render() {\r\n        if (this.state.logged) return <WrappedComponent {...this.props} />;\r\n        if (this.state.error) return typeof renderError === 'function' ? renderError(this.state.error) : null;\r\n        return typeof renderLoading === 'function' ? renderLoading() : null;\r\n      }\r\n    };\r\n  };\r\n};*/\r\n\r\nexport const googleSecureCall = async (f) => {\r\n  \r\n  let auth = window.gapi.auth2.getAuthInstance();  \r\n  let signedIn = auth.currentUser.get();\r\n  console.log('signedIn:', signedIn.getBasicProfile());\r\n    if (!signedIn){\r\n      let r = await auth.signIn();\r\n       console.log('Google res:, ',r); \r\n        \r\n      let signedIn = window.gapi.auth2.currentUser.get();\r\n      if (signedIn) {\r\n        return f();\r\n      }\r\n      \r\n    }\r\n    else{\r\n      return f();\r\n    }\r\n  }\r\n\r\nexport const withGoogleLogin = () => {\r\n  // eslint-disable-next-line\r\n  return function(WrappedComponent, renderLoading, renderError) {\r\n    return class extends React.Component {\r\n      constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          logged: false,\r\n          error: null,\r\n        };\r\n      }\r\n\r\n      checkGapi = () => {\r\n        let gapi = window.gapi;\r\n        if (!window.googleReady && (!gapi || !gapi.auth2)){\r\n          console.log('waiting for gapi');\r\n          if (gapi && !gapi.auth2) gapi.load('auth2', function() { \r\n            window.googleReady = true;\r\n            window.gapi.auth2.init({ux_mode:'popup',\r\n            client_id:'1008335591690-9mgv2poc3vpi0ke1fi7c5m1dl2sejjru.apps.googleusercontent.com',scope:'email openid'});\r\n            \r\n            \r\n            this.setState({auth:true});\r\n            /*window.gapi.auth2.init({client_id:'1008335591690-9mgv2poc3vpi0ke1fi7c5m1dl2sejjru.apps.googleusercontent.com'});  \r\n            window.gapi.auth2.isSignedIn.listen(() =>console.log('Signin state changed to ', val));*/\r\n\r\n          }.bind(this));\r\n          /*if (gapi && gapi.auth2) gapi.auth2.init();\r\n          if (gapi && gapi.auth2 && gapi.auth2.GoogleAuth.then) gapi.auth2.GoogleAuth.then(()=>this.setState({auth:window.gapi.auth2.GoogleAuth}),(e)=>this.setState({error:e}))*/\r\n          \r\n          setTimeout(() => {this.checkGapi()}, 100);\r\n          this.setState({ready:false});\r\n          return;\r\n        }\r\n      \r\n         this.setState({logged:true}); \r\n\r\n        }\r\n        \r\n\r\n\r\n\r\n      \r\n\r\n      componentWillMount = () => {\r\n        \r\n        /*let gapi = window.gapi\r\n        googleGetToken(authContext, resourceId)\r\n          .then(() => this.setState({ logged: true }))\r\n          .catch((error) => {\r\n            const { msg } = error;\r\n            console.log(error);\r\n            \r\n            if (msg === 'login required') {\r\n              authContext.login();\r\n            } else {\r\n              authContext.login();\r\n            }\r\n          });*/\r\n\r\n          this.checkGapi();\r\n      };\r\n\r\n      render() {\r\n        if (this.state.logged) return <WrappedComponent {...this.props} />;\r\n        if (this.state.error) return typeof renderError === 'function' ? renderError(this.state.error) : null;\r\n        return typeof renderLoading === 'function' ? renderLoading() : null;\r\n      }\r\n    };\r\n  };\r\n};\r\n\r\n","import { AuthenticationContext, adalFetch, withAdalLogin, adalGetToken } from 'react-adal';\r\n\r\nimport { withGoogleLogin, googleGetToken, googleSecureCall} from './components/react_adal/react-adal-google';\r\n\r\nexport const adalConfig = {\r\n  tenant: 'common',\r\n  clientId: '9f256bb0-1a93-4247-9e1e-bbd05532e2ce',\r\n  \r\n endpoints: {\r\n    api: '9f256bb0-1a93-4247-9e1e-bbd05532e2ce',\r\n  },\r\n  cacheLocation: 'localStorage',\r\n  popUp:true\r\n};\r\n\r\nexport const googleConfig = {\r\n  tenant: null,\r\n  name:'google',\r\n  clientId: '1008335591690-9mgv2poc3vpi0ke1fi7c5m1dl2sejjru.apps.googleusercontent.com',\r\n  authorize: 'auth',\r\n  endpoints: {\r\n    api: 'testApi',\r\n  },\r\n  scope: 'profile email',\r\n  popUp:false,\r\n  navigateToLoginRequestUrl:false,\r\n  instance:'https://accounts.google.com/o/oauth2/v2/',\r\n  cacheLocation: 'localStorage',\r\n // state:'pass-through value'\r\n};\r\n\r\nexport const authContext = new AuthenticationContext(adalConfig);\r\n\r\nexport const adalApiFetch = (fetch, url, options) =>\r\n  adalFetch(authContext, adalConfig.endpoints.api, fetch, url, options);\r\n\r\nexport const withAdalLoginApi = ()=>{authContext.handleWindowCallback(); return withAdalLogin(authContext, adalConfig.endpoints.api)};\r\n\r\n//export const authGoogleContext = new GoogleAuthenticationContext(googleConfig);\r\n\r\n/*export const googleApiFetch = (fetch, url, options) =>\r\n  googleFetch(authGoogleContext, '1008335591690-9mgv2poc3vpi0ke1fi7c5m1dl2sejjru.apps.googleusercontent.com', fetch, url, options);\r\n*/\r\nexport const withGoogleLoginApi = withGoogleLogin();\r\n\r\nexport const getGoogleToken = () => googleGetToken();\r\nexport const getAdalToken = () => adalGetToken(authContext, adalConfig.endpoints.api);\r\n\r\nexport const getCachedGoogleUser = () => googleSecureCall(()=>window.gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile());\r\nexport const getCachedAdalUser = () => authContext.getCachedUser();\r\n\r\nexport const logOutGoogle = () => null;\r\nexport const logOutAdal = () => authContext.logOut();","import { createAction } from 'redux-actions';\r\n\r\nexport const setSecAzure = createAction('sec/azure');\r\nexport const setSecGoogle = createAction('sec/google');\r\nexport const setSecReset = createAction('sec/reset');\r\nexport const setSecUser = createAction('sec/user');\r\n\r\nexport const setSecGoogleFailure = createAction('sec/googleFail');\r\n\r\nexport const requestTest = createAction('test/requestTest');\r\nexport const testRequested = createAction('test/requested');\r\nexport const testRecieved = createAction('test/recieved');\r\nexport const testFailed = createAction('test/failed');\r\n\r\n","import { handleActions } from 'redux-actions';\r\nimport * as actions from '../actions';\r\n\r\nconst defaultState = {\r\n    // Home page\r\n    loggedIn: false,\r\n    loginType: null,\r\n    user: null,\r\n    token: null\r\n    \r\n    \r\n\r\n};\r\n\r\nexport const reducer = handleActions({\r\n    [actions.setSecAzure]: (state, action) => ({\r\n        ...state,\r\n        loginType:'azure',\r\n        loggedIn: true\r\n    }),\r\n    [actions.setSecGoogle]: (state, action) => ({\r\n        ...state,\r\n        loginType:'google',\r\n        loggedIn: false,\r\n      \r\n    }),\r\n    [actions.setSecUser]: (state, action) => ({\r\n        ...state,\r\n        loggedIn: true,\r\n        user: action.payload\r\n        \r\n    }),\r\n    [actions.setSecGoogleFailure]: (state, action) => ({\r\n        ...state,\r\n        loggedIn: false,\r\n        secError: action.payload,\r\n       \r\n    }),\r\n    \r\n    [actions.setSecReset]: (state, action) => ({\r\n        ...state,\r\n        loginType:'',\r\n        loggedIn: false,\r\n        secError: null\r\n    }),\r\n\r\n}, defaultState);\r\n\r\nconst getData = state => state.app;\r\n\r\nconst getSec = state => state.sec;\r\n\r\nexport const loginType = state => getSec(state).loginType;\r\nexport const loggedIn = state => getSec(state).loggedIn;\r\nexport const user = state => getSec(state).user;\r\nexport const token = state => getSec(state).token;\r\nexport const secError = state => getSec(state).secError;\r\n","\r\nconst config = {\r\n    getToken: null,\r\n    apiBase: 'https://local-test.galapate.com:44346',\r\n    scheme:null\r\n}\r\n\r\nexport  const apiRequest = async (url, params, noAuth) => {\r\n    let token = null;\r\n    if (!noAuth) {\r\n        token = await config.getToken();\r\n    }\r\n    let query = '';\r\n    params = params || [];\r\n    if (config.scheme) params.push({key:config.scheme, value:''});\r\n    if (params.length > 0)\r\n        query = '?';\r\n    let firstSet = true;\r\n    for (var i = 0; i < params.length; i++) {\r\n        if (params[i].value !== null) {\r\n            if (i > 0 && !firstSet)\r\n                query += '&';\r\n            firstSet = false;\r\n            query += params[i].key + '=' + encodeURIComponent(params[i].value);\r\n        }\r\n    }\r\n    return fetch(`${config.apiBase}${url}${query}`, {\r\n        method: \"GET\",\r\n        headers:  {\r\n            'Authorization': noAuth ? null : 'Bearer '+ token, \r\n            'Content-Type': 'application/json; charset=utf-8d'\r\n          }, \r\n        })\r\n        .then(response => {\r\n            return response.json();\r\n           \r\n        })\r\n        .then(data => {\r\n            return data;\r\n        })\r\n        .catch(error => {\r\n            return { error: error };\r\n        });\r\n};\r\n\r\nconst post = (url, body) => {\r\n    return fetch(config.apiBase+url, {\r\n        method: \"POST\",\r\n        headers:  {\r\n            'Authorization': 'Bearer '+ config.token, \r\n            'Content-Type': 'application/json; charset=utf-8d'\r\n          }, \r\n        body: JSON.stringify(body)\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n\r\n        })\r\n        .then(data => {\r\n            return data;\r\n        })\r\n        .catch(error => {\r\n            return { error: error };\r\n        });\r\n};\r\n\r\nconst postRaw = (url, body) => {\r\n    return fetch(config.apiBase+url, {\r\n        method: \"POST\",\r\n        headers:  {\r\n          }, \r\n        body: body\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n\r\n        })\r\n        .then(data => {\r\n            return data;\r\n        })\r\n        .catch(error => {\r\n            return { error: error };\r\n        });\r\n};\r\nexport const getTest = (params) => {\r\n    return apiRequest('/api/v1/user/info', params);\r\n};\r\n\r\nexport const getUserInfo = (params) => {\r\n    return apiRequest('/api/v1/user/info', params);\r\n};\r\n\r\nexport const getGoogleUser = (params) => {\r\n    return apiRequest('/api/v1/user/google-code',[{key:'code', value: params}], true);\r\n};\r\n\r\nexport const refreshGoogleUser = (params) => {\r\n    return apiRequest('/api/v1/user/google-refresh',[]);\r\n};\r\n\r\n\r\nexport const saveTest = (data) => {\r\n    return post('/api/test', data);\r\n};\r\n\r\nexport const getToken = () => {\r\n    return config.getToken ? config.getToken() : ()=>console.log(\"No get token method set\")\r\n};\r\nexport const setGetToken = (getToken, scheme, logOut) => {\r\n    config.getToken = getToken;\r\n    config.scheme = scheme;\r\n    config.logOut = logOut;\r\n};\r\nexport const logOut = () => config.logOut();\r\n\r\n","import * as actions from '../actions';\r\nimport * as reducer from '../reducers/Sec';\r\nimport { connect } from 'react-redux';\r\nimport * as api from '../services/api';\r\nimport React, { Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Glyphicon, Nav, Navbar, NavItem,Col, Row, NavDropdown, MenuItem } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { Route, Redirect,Switch, withRouter } from \"react-router-dom\";\r\n\r\n//import './Header.css';\r\n\r\n\r\nclass NavWrap extends Component {\r\n   \r\n    render() {\r\n      const {\r\n        active,\r\n        activeKey,\r\n        activeHref,\r\n        onSelect,\r\n  \r\n        children,\r\n  \r\n        ...otherProps\r\n      } = this.props;\r\n      return (<li role=\"presentation\" {...otherProps}>\r\n        {children}\r\n      </li>);\r\n    }\r\n}\r\nclass Header extends Component{\r\n  \r\n  componentDidMount() {\r\n  \r\n  }\r\n\r\n  render(){ \r\n    return <Navbar fixedTop fluid collapseOnSelect>\r\n    <Navbar.Header>\r\n            <Navbar.Brand>\r\n                    <Row>\r\n                        <Col xs={5}>\r\n                            Logo\r\n                            \r\n                        </Col>\r\n                        <Col xs={7}>\r\n                            <Link className=\"brand\" to={'/'}>Name</Link>\r\n                            \r\n                        </Col>\r\n                    </Row>\r\n                \r\n      </Navbar.Brand>\r\n      <Navbar.Toggle />\r\n    </Navbar.Header>\r\n    <Navbar.Collapse>\r\n      <Nav>\r\n        <LinkContainer to={'/'} exact>\r\n          <NavItem>\r\n            Home\r\n          </NavItem>\r\n        </LinkContainer>\r\n        <LinkContainer to={'/pricing'} exact>\r\n          <NavItem>\r\n            Pricing\r\n          </NavItem>\r\n        </LinkContainer>\r\n        <LinkContainer to={'/about'} exact>\r\n          <NavItem>\r\n            Why this service\r\n          </NavItem>\r\n        </LinkContainer>\r\n            </Nav>\r\n            <Nav pullRight>\r\n\r\n            <NavDropdown id={'user-menu'} noCaret title={(\r\n                this.props.user ? (\r\n                  <div className=\"user-info\">\r\n                      {this.props.user.thumb ?<div> <img style={{height:'35px', paddingRight:'10px'}} srcSet={this.props.user.thumb} /> {this.props.user.name}</div>: <div> <Glyphicon style={{paddingRight:'10px'}} pullright=\"true\" glyph='user' /> {this.props.user.name}</div>}\r\n                  </div>\r\n                  ) \r\n                  : ''\r\n               )}>\r\n                <MenuItem onClick={() => api.logOut()}>Sign out</MenuItem>\r\n              </NavDropdown>\r\n            </Nav>\r\n    </Navbar.Collapse>\r\n  </Navbar>\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  user : reducer.user(state),\r\n  loggedIn : reducer.loggedIn(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  \r\n});\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Header));\r\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\nimport * as api from '../services/api';\n//import config from './config.json';\nimport GoogleLogin from 'react-google-login';\nimport * as actions from '../actions';\nimport * as reducer from '../reducers/Sec';\nimport { withGoogleLogin, googleSecureCall } from './react_adal/react-adal-google';\n\n\nclass App extends Component {\n  state = {\n    response: ''\n  };\n\n  componentDidMount() {\n    console.log(\"init:\",this.props);\n    \n  \n  }\n\n  componentWillUpdate(nextProps) {\n\n    console.log(nextProps);\n\n  }\n\n  callApi = async () => {\n    let token = await api.getToken();\n    console.log(token);\n    const response = await api.getUserInfo();\n    console.log(response);\n  };\n  \n  async getUserInfo(code){\n    let res = await api.getGoogleUser(code);\n    if (res.error){\n      console.log(res.error);\n    }\n    else{\n      this.props.setSecGoogleSuccess(res);\n    }\n \n\n  }\n\n  test = () =>{\n    return fetch(`https://store.galapate.com/api/values`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers:  {\n          'Content-Type': 'application/json; charset=utf-8d'\n        }, \n      })\n      .then(response => {\n        return response.json();\n       \n    })\n    .then(data => {\n        console.log(data);\n    })\n    .catch(error => {\n      console.log({ error: error });\n  });\n  }\n  responseGoogle = (response) => {\n    this.props.setSecGoogle(response);\n  \n    let code = response.code;\n    if (code){\n       this.getUserInfo(code);\n    }\n    console.log(response);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n         {/*  {(this.props.token && this.props.token.access_token) ?(\n          <GoogleLogin\n             clientId=\"1008335591690-9mgv2poc3vpi0ke1fi7c5m1dl2sejjru.apps.googleusercontent.com\" //zqe_sXoMKPye7wr-Ahw6FZgX\n            buttonText=\"Login\" accessType='offline'\n            onSuccess={this.responseGoogle}\n            onFailure={(e)=>this.props.setSecReset({error: e.error + ': ' + e.description })}\n            approvalPrompt={(this.props.token && this.props.token.access_token) ? null : \"force\"}\n            offline={true}\n            responseType=\"code\"\n            prompt={(this.props.token && this.props.token.access_token) ? null : \"consent\"}\n            />): (\n              <GoogleLogin\n              clientId=\"1008335591690-9mgv2poc3vpi0ke1fi7c5m1dl2sejjru.apps.googleusercontent.com\" //zqe_sXoMKPye7wr-Ahw6FZgX\n             buttonText=\"ReLogin\" accessType='offline'\n             onSuccess={this.responseGoogle}\n             onFailure={(e)=>this.props.setSecReset({error: e.error + ': ' + e.description })}\n             offline={true}\n             />\n            )}*/}\n            <h2>{this.props.loginType}</h2>\n            {!this.props.getToken ? (\n              <div>\n                <button onClick={()=>googleSecureCall(()=>this.props.setSecGoogle())}>Google</button>\n                <div className=\"g-signin2\" data-onsuccess=\"onSignIn\">Hellu</div>\n                <button onClick={()=>this.props.setSecAzure()}>Azure</button>\n                <button onClick={()=>this.callApi()}>Test</button>\n                <br/>\n                <br/>\n                <a href=\"https://store.galapate.com/account/google\">Actual google</a>\n                <button onClick={()=>this.test()}>Test2</button>\n\n                \n            </div>): null}\n\n          <p className=\"App-intro\">{this.state.response}</p>\n          <p>\n            Edit <code>src/App.js</code> and save to reloaddd.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React Just in app\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  loginType : reducer.loginType(state),\n  loggedIn : reducer.loggedIn(state),\n  secError : reducer.secError(state),\n  token : reducer.token(state)\n  \n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  'setSecAzure': (value) => dispatch(actions.setSecAzure(value)),\n  'setSecGoogle': (value) => dispatch(actions.setSecGoogle(value)),\n  'setSecReset': (value) => dispatch(actions.setSecReset(value)),\n  \n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\n\nclass Pricing extends Component {\n  state = {\n    response: ''\n  };\n\n  componentDidMount() {\n    \n  \n  }\n\n  componentWillUpdate(nextProps) {\n\n   \n  }\n\n  \n \n  render() {\n    return (\n      <div><h1>Pricing</h1></div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n /* loginType : reducer.loginType(state),\n  loggedIn : reducer.loggedIn(state),\n  secError : reducer.secError(state),\n  token : reducer.token(state)*/\n  \n});\n\nconst mapDispatchToProps = (dispatch) => ({\n/*  'setSecAzure': (value) => dispatch(actions.setSecAzure(value)),\n  'setSecGoogle': (value) => dispatch(actions.setSecGoogle(value)),\n  'setSecReset': (value) => dispatch(actions.setSecReset(value)),\n  'setSecGoogleSuccess':(value) => dispatch(actions.setSecGoogleSuccess(value)),*/\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pricing);\n\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\n\nclass About extends Component {\n  state = {\n    response: ''\n  };\n\n  componentDidMount() {\n    \n  \n  }\n\n  componentWillUpdate(nextProps) {\n\n   \n  }\n\n  \n \n  render() {\n    return (\n      <div><h1>About</h1></div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n /* loginType : reducer.loginType(state),\n  loggedIn : reducer.loggedIn(state),\n  secError : reducer.secError(state),\n  token : reducer.token(state)*/\n  \n});\n\nconst mapDispatchToProps = (dispatch) => ({\n/*  'setSecAzure': (value) => dispatch(actions.setSecAzure(value)),\n  'setSecGoogle': (value) => dispatch(actions.setSecGoogle(value)),\n  'setSecReset': (value) => dispatch(actions.setSecReset(value)),\n  'setSecGoogleSuccess':(value) => dispatch(actions.setSecGoogleSuccess(value)),*/\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(About);\n\n","import React, { Component } from 'react';\r\nimport { Col, Grid, Row } from 'react-bootstrap';\r\nimport { Route, Redirect,Switch, withRouter } from \"react-router-dom\";\r\n//import NavMenu from './NavMenu';\r\nimport Header from './Header';\r\nimport  App  from \"./App\";\r\nimport  Pricing  from \"./Pricing\";\r\nimport  About  from \"./About\";\r\nimport { connect } from 'react-redux';  \r\n\r\n\r\nclass Layout extends Component {\r\n    state = {\r\n      response: ''\r\n    };\r\n  \r\n    componentDidMount() {\r\n      console.log(\"init:\",this.props);\r\n      \r\n    \r\n    }\r\n  \r\n    componentWillUpdate(nextProps) {\r\n  \r\n      console.log(nextProps);\r\n  \r\n    }\r\nrender (){   \r\n   return (\r\n   <Grid fluid>\r\n        <Row>\r\n            <Col sm={12}>\r\n                <Header/>\r\n            </Col>\r\n        </Row>\r\n    <Row>\r\n      <Col sm={12} className={\"page\"}>\r\n        <Switch>\r\n            <Redirect path='/null' to=\"/\" />\r\n            <Route path='/' component={App} exact/>\r\n        </Switch>\r\n        <Route path='/pricing' component={Pricing} />\r\n        <Route path='/about' component={About} />\r\n      </Col>\r\n    </Row>\r\n  </Grid>\r\n)\r\n}\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  \r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    \r\n  });\r\n  \r\n  export default withRouter(connect(mapStateToProps, mapDispatchToProps)(Layout));\r\n","import { runWithAdal,withAdalLogin } from 'react-adal';\r\nimport { authContext, withAdalLoginApi, withGoogleLoginApi, getAdalToken,getGoogleToken,  logOutAdal, getCachedAdalUser, getCachedGoogleUser } from './adalConfig';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport React, { Component } from \"react\";\r\nimport { Route, Redirect, withRouter } from \"react-router-dom\";\r\nimport  Layout  from \"./components/Layout\";\r\nimport  App,{GoogleTokenApp, AdalTokenApp}  from \"./components/App\";\r\nimport * as actions from './actions';\r\nimport * as sec from './reducers/Sec';\r\nimport * as api from './services/api';\r\n/*import  FetchData  from \"./components/FetchData\";\r\nimport  Counter  from \"./components/Counter\";\r\nimport Archive from \"./components/Archive\";\r\nimport Projects from \"./components/Projects\";\r\nimport Locations from \"./components/Locations\";\r\n*/\r\n\r\nconst AzureApp = withAdalLoginApi()(Layout, ()=><b>Loading</b>, (error)=><b>Error {error}</b>);\r\nconst GoogleApp = withGoogleLoginApi(Layout, ()=><b>Loading</b>, (error)=><b>Error {error}</b>);\r\n//const getGoogleToken = () => gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token;\r\n\r\nconst logOutGoogle = () =>{\r\n    var auth2 = window.gapi.auth2.getAuthInstance();\r\n    auth2.signOut().then(function () {\r\n      console.log('User signed out.'); \r\n    });\r\n};\r\n\r\nclass Routes extends Component {\r\n    state = {\r\n      response: ''\r\n    };\r\n\r\n    async setGoogle(props){\r\n        if (!window.googleReady){\r\n            setTimeout(() => {this.setGoogle(props)}, 100);\r\n            return;\r\n        }\r\n        let res = null;\r\n        try {\r\n         \r\n            res = await getCachedGoogleUser();\r\n        }\r\n        catch (error)\r\n        {\r\n            props.setSecReset();\r\n            return;\r\n        }\r\n        console.log(res);\r\n        api.setGetToken(()=>getGoogleToken(), 'g', () => logOutGoogle());\r\n        if (res && res.profile){\r\n            props.setUser({email:res.userName, name:res.profile.name, thumb:res.profile.picture})\r\n        }\r\n    }\r\n\r\n    setSec(props)\r\n    {\r\n        if (props.loginType == 'azure'){\r\n            var res = getCachedAdalUser(); \r\n            \r\n            getAdalToken();\r\n            api.setGetToken(()=>getAdalToken(), 'a', () => logOutAdal() ); \r\n            if (res && res.profile){\r\n                props.setUser({email:res.userName, name:res.profile.name})\r\n            }\r\n            \r\n        }\r\n        else if (props.loginType == 'google'){\r\n            this.setGoogle(props);\r\n           \r\n        }\r\n\r\n    }\r\n  \r\n    componentDidMount() {\r\n        this.setSec(this.props);\r\n        \r\n    }\r\n\r\n    componentWillUpdate(nextProps) {\r\n\r\n        this.setSec(nextProps);\r\n        console.log('nextProps',nextProps);\r\n    }\r\n    \r\n    routes() {\r\n        switch(this.props.loginType) {\r\n            case 'azure': return (\r\n            <AzureApp/>)\r\n            case 'google':\r\n              return (<GoogleApp/>)\r\n                \r\n            default : return (<Layout/>\r\n)\r\n          }\r\n        \r\n    }\r\n    render() {\r\n       return this.routes();\r\n        \r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    //'mmtSystem': reducer.mmtSystem(state),\r\n    loginType : sec.loginType(state)\r\n \r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n   \r\n    'setUser': (value) => dispatch(actions.setSecUser(value)),\r\n    'setSecReset': (value) => dispatch(actions.setSecReset(value)),\r\n   \r\n  });\r\n  \r\n  export default withRouter(connect(mapStateToProps, mapDispatchToProps)(Routes));\r\n/*\r\n  <Route path='/archive' component={Archive} />\r\n        <Route path='/projects' component={Projects} />\r\n        <Route path='/locations' component={Locations} />\r\n        <Route path='/fetchdata/:startDateIndex?' component={FetchData} />\r\n\r\n        */","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { handleActions } from 'redux-actions';\r\nimport * as actions from '../actions';\r\n\r\nconst defaultState = {\r\n    test:''\r\n    // Home page\r\n  \r\n    \r\n\r\n};\r\n\r\nexport const reducer = handleActions({\r\n   /* [actions.setSecAzure]: (state, action) => ({\r\n        ...state,\r\n        loginType:'azure',\r\n        loggedIn: true\r\n    }),\r\n    [actions.setSecGoogle]: (state, action) => ({\r\n        ...state,\r\n        loginType:'google',\r\n        loggedIn: false,\r\n      \r\n    }),\r\n    [actions.setSecGoogleSuccess]: (state, action) => ({\r\n        ...state,\r\n        loggedIn: true,\r\n        user: action.payload.user,\r\n        token: action.payload.token\r\n    }),\r\n    [actions.setSecGoogleFailure]: (state, action) => ({\r\n        ...state,\r\n        loggedIn: false,\r\n        secError: action.payload,\r\n       \r\n    }),\r\n    \r\n    [actions.setSecReset]: (state, action) => ({\r\n        ...state,\r\n        loginType:'',\r\n        loggedIn: false,\r\n        secError: null\r\n    }),*/\r\n\r\n}, defaultState);\r\n\r\nconst getData = state => state.app;\r\n\r\nexport const test = state => getData(state).test;\r\n/*export const loginType = state => getData(state).loginType;\r\nexport const loggedIn = state => getData(state).loggedIn;\r\nexport const user = state => getData(state).user;\r\nexport const token = state => getData(state).token;\r\nexport const secError = state => getData(state).secError;\r\n*/","import {\r\n    put,\r\n    call,\r\n    takeLatest,\r\n    all,\r\n    select\r\n} from 'redux-saga/effects';\r\nimport * as api from '../services/api';\r\nimport * as actions from '../actions';\r\n\r\nconst parameterIfSet = (p) => {\r\n    if (p && p.code) {\r\n        return p.code;\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction* getTest(action) {\r\n\r\n    try {\r\n\r\n        yield put(actions.testRequested());\r\n        var res = yield call(api.getTest);\r\n        yield put(actions.testRecieved(res));\r\n\r\n    } catch (ex) {\r\n\r\n        yield put(actions.testFailed(ex));\r\n\r\n    }\r\n\r\n}\r\n\r\nconst root = function* rootSaga() {\r\n\r\n    yield all([\r\n        takeLatest(`${actions.requestTest}`, getTest),\r\n   \r\n    ]);\r\n\r\n};\r\n\r\nexport default root;\r\n","import { runWithAdal } from 'react-adal';\nimport { authContext } from './adalConfig';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\nimport 'babel-polyfill';\nimport 'matchmedia-polyfill';\nimport { Provider } from 'react-redux';\nimport { createBrowserHistory } from 'history';\nimport { ConnectedRouter } from 'react-router-redux';\nimport 'whatwg-fetch';\n\n\nimport configureStore from './store/configureStore';\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\n\n\nconst history = createBrowserHistory({ basename: baseUrl });\n\n// Get the application-wide store instance, prepopulating with state from the server where available.\n//const initialState = window.initialReduxState;\nconst rootElement = document.getElementById('root');\nconst store = configureStore(history);\n\n\nfunction renderApp() {\n   \n    return ReactDOM.render(\n        <Provider store={store}>\n                  <ConnectedRouter history={history}>\n                    <Routes />\n                  </ConnectedRouter>\n        </Provider>,\n        rootElement);\n}\nrenderApp();\n\nif (module.hot) {\n  module.hot.accept(\"./Routes\", () => {\n    require(\"./Routes\");\n    renderApp();\n  });\n}\n\nconst loadClientWhenGapiReady = (script) => {\n  console.log('Trying To Load Client!');\n  console.log(script)\n  if(script.getAttribute('gapi_processed')){\n    console.log('Client is ready! Now you can access gapi. :)');\n   /* if(window.location.hostname==='localhost'){\n      window.gapi.client.load(\"http://localhost:8080/_ah/api/discovery/v1/apis/metafields/v1/rest\")\n      .then((response) => {\n        console.log(\"Connected to metafields API locally.\");\n        },\n        function (err) {\n          console.log(\"Error connecting to metafields API locally.\");\n        }\n      );\n    }*/\n  }\n  else{\n    console.log('Client wasn\\'t ready, trying again in 100ms');\n    setTimeout(() => {loadClientWhenGapiReady(script)}, 100);\n  }\n}\n\nconst initGapi = () => {\n  console.log('Initializing GAPI...');\n  console.log('Creating the google script tag...');\n\n  const script = document.createElement(\"script\");\n  script.onload = () => {\n    console.log('Loaded script, now loading our api...')\n    // Gapi isn't available immediately so we have to wait until it is to use gapi.\n    loadClientWhenGapiReady(script);\n  };\n  script.src = \"https://apis.google.com/js/platform.js?onload=init\";\n  \n  document.body.appendChild(script);\n}\n\ninitGapi();\n/*runWithAdal(authContext, () => {\n\n    // eslint-disable-next-line\n    return renderApp();\n  \n  },true);\n\nif (module.hot) {\n    module.hot.accept(\"./Routes\", () => {\n      require(\"./Routes\");\n      renderApp();\n    });\n  }\n/*\nimport { runWithAdal } from 'react-adal';\nimport { authContext } from './adalConfig';\nimport \n\nconst DO_NOT_LOGIN = true;\n\nrunWithAdal(authContext, () => {\n\n  // eslint-disable-next-line\n  require('./indexApp.js');\n\n},DO_NOT_LOGIN);\n\n*/\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { routerReducer, routerMiddleware } from 'react-router-redux';\r\nimport * as App from '../reducers/App';\r\nimport * as Sec from '../reducers/Sec';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport sagas  from '../sagas/index.js';\r\nimport { save, load } from \"redux-localstorage-simple\"\r\n\r\nfunction logger({ getState }) {\r\n  return (next) => (action) => {\r\n    console.log('dispatch:', action)\r\n \r\n  }\r\n}\r\nexport default function configureStore(history) {\r\n  const reducers = {\r\n      app: App.reducer,\r\n      sec: Sec.reducer\r\n    };\r\n    const sageMiddleware = createSagaMiddleware();\r\n  //const sagaMiddleware = applyMiddleware(sagaMiddleware);\r\n  const middleware = [\r\n    thunk,\r\n     routerMiddleware(history),\r\n      sageMiddleware,\r\n     // logger\r\n  ];\r\n\r\n  // In development, use the browser's Redux dev tools extension if installed\r\n  const enhancers = [];\r\n  const isDevelopment = process.env.NODE_ENV === 'development';\r\n  if (isDevelopment && typeof window !== 'undefined' && window.devToolsExtension) {\r\n    enhancers.push(window.devToolsExtension());\r\n  }\r\n  \r\n  const rootReducer = combineReducers({\r\n    ...reducers,\r\n      routing: routerReducer\r\n     \r\n  });\r\n  \r\n  const createStoreWithMiddleware \r\n  = applyMiddleware(\r\n      save({ states: [\"sec\"], namespace: \"apps\" }) // Saving done here\r\n  )(createStore)\r\n\r\n\r\n    let store = createStoreWithMiddleware(\r\n    rootReducer,\r\n    load({ states: [\"sec\"], namespace: \"apps\" }),  \r\n       \r\n    compose(applyMiddleware(...middleware), ...enhancers),\r\n    \r\n    );\r\n\r\n    sageMiddleware.run(sagas);\r\n\r\n    return store;\r\n \r\n}\r\n"],"sourceRoot":""}